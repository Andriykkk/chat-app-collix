// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
enum Roles{
	ADMIN
	USER
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String   @unique
  password String
  f_name String?
  l_name String?
  email String @unique
  profilePicture String?
  invitationLink String @unique

  chats1 Chat[] @relation("User1Chats")
  chats2 Chat[] @relation("User2Chats")
  messages Messages[]
}

 model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user1 User @relation("User1Chats", fields: [user1_id], references: [id], onDelete: Cascade)
  user1_id String

  user2 User @relation("User2Chats", fields: [user2_id], references: [id], onDelete: Cascade)
  user2_id String

  messages Messages[]
}


 

model Messages{
  id String @id @default(auto()) @map("_id") @db.ObjectId

  chat Chat @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id String

  user User @relation(fields: [user_id], references: [id], onDelete:Cascade)
  user_id String
 
  content String? 
  media_url String?

  deleted Boolean @default(false)
  edited Boolean @default(false)
  read Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}